---
const { services } = Astro.props;
---

<div id="card-container" class="w-80">
  {
    services.map(
      (service: {
        cardIcon: string;
        cardTitle: string;
        serviceDescription: string;
      }) => (
        <div>
          <img src={service.cardIcon} alt="Card Icon" class="w-8" />
          <h1 class="text-4xl font-bold mt-5">{service.cardTitle}</h1>
          <p class="mt-3">{service.serviceDescription}</p>
        </div>
      )
    )
  }
</div>

<style>
  #card-container {
    width: 1400px;
    position: relative;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    column-gap: 20px;
    opacity: 0;
    left: -20px;
    transition: all 1s ease;
  }

  #card-container.show {
    opacity: 1;
    left: 0;
  }

  #card-container h1 {
    color: var(--azul-maxtec);
    width: 100%;
  }

  #card-container p {
    color: #979797;
    font-size: 16px;
    width: 80%;
  }

  @media (max-width: 768px) {
    #card-container {
      grid-template-columns: 1fr;
      column-gap: 0px;
      width: 100%;
    }
  }
</style>

<script>
  const cardContainer = document.querySelectorAll("#card-container");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        entry.target.classList.toggle("show", entry.isIntersecting);
        if (entry.isIntersecting) {
          observer.unobserve(entry.target);
        }
      });
    },
    {
      threshold: 1,
    }
  );

  cardContainer.forEach((card) => {
    observer.observe(card);
  });
</script>
